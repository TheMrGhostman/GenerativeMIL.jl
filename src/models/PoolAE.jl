struct PoolAE 
    pre_encoder
    bottleneck
    generator
    decoder
end

Flux.@functor PoolAE

function (m::PoolAE)(x::AbstractArray{T, 2}) where T <: Real
    set_size = size(x, 2) 
    features = m.pre_encoder(x) # (D, N) -> (Hidden_dim, N)
    maxes = maximum(features, dims=2) # (HD, N) -> (HD,1)
    means = Flux.mean(features, dims=2) # (HD, N) -> (HD,1)
    features = vcat(means, maxes) # (2*HD, 1)

    Œº, Œ£ = m.bottleneck(features)
    z = Œº + Œ£ .* randn(Float32, size(Œº)...)
    
    kld = - Flux.mean(0.5f0 * sum(1f0 .+ log.(Œ£.^2) - Œº.^2  - Œ£.^2, dims=1)) 

    Œº‚ÇÅ, Œ£‚ÇÅ = m.generator(z)
    gen_z = Œº‚ÇÅ .+ Œ£‚ÇÅ .* randn(Float32, size(Œº‚ÇÅ, 1), set_size)

    xÃÇ = m.decoder(gen_z)
    return xÃÇ, kld
end

function loss(m::PoolAE, x::AbstractArray{T, 2}, Œ≤::Float32=1f0) where T <: Real
    xÃÇ, ùìõ_kld = m(x)
    ùìõ_rec = chamfer_distance(x, xÃÇ)
    return ùìõ_rec + Œ≤ .* ùìõ_kld, ùìõ_kld
end

function batched_loss(m::PoolAE, x, beta=1f0)
    bs = length(x)
    ùìõ = 0
    kld = 0
    for i in x
        l, k = loss(m, i, beta)
        ùìõ += l
        kld += k
    end
    return ùìõ/bs, kld/bs
end

function PoolAE(in_dim, hidden, latent_dim, pre_pool_hidden, gen_sigma="scalar", activation::Function=swish)
    if gen_sigma == "scalar"
        gen_out_dim = 1
    elseif gen_sigma == "diag"
        gen_out_dim = pre_pool_hidden
    else
        error("Unkown type of vairance")
    end

    pre_enc = Flux.Chain(
        Flux.Dense(in_dim, hidden, activation), 
        Flux.Dense(hidden, hidden, activation),
        Flux.Dense(hidden, pre_pool_hidden, activation)
    )
    bottle = Flux.Chain(
        Flux.Dense(2*pre_pool_hidden, hidden, activation),
        Flux.Dense(hidden, hidden, activation),
        SplitLayer(hidden, (latent_dim, latent_dim), (identity, Flux.softplus))
    )
    gen = Flux.Chain(
        Flux.Dense(latent_dim, hidden, activation),
        Flux.Dense(hidden, hidden, activation),
        SplitLayer(hidden, (pre_pool_hidden, gen_out_dim), (identity, Flux.softplus))
    )
    dec = Flux.Chain(
        Flux.Dense(pre_pool_hidden, hidden, activation),
        Flux.Dense(hidden, hidden, activation),
        Flux.Dense(hidden, in_dim)
    )
    return PoolAE(pre_enc, bottle, gen, dec)
end